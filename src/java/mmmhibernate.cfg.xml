<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
 
<!-- 该文件是是Hibernate框架自动加载的默认配置文件，主要用于配置数据库连接信息，以及持久类的映射文件 -->
<!-- hibernate.sourceforge.net/hibernate-configuration-3.0dtd可以在  
Hibernate3.1.3软件包中的src\org\hibernate目录中找到此文件 -->
<hibernate-configuration>
	<!--表明以下的配置是针对session-factory配置的，SessionFactory是Hibernate中的一个类，
	这个类主要负责保存HIbernate的配置信息，以及对Session的操作-->  
	<session-factory>

		<!-- 配置关于数据库连接的四个项 driverClass url username password -->
		<property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
		<property name="hibernate.connection.url">jdbc:mysql://localhost:3306/test?useSSL=false&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</property>
		<property name="hibernate.connection.username">ssm</property>
		<property name="hibernate.connection.password">123456</property>
		<!--数据库连接池的大小-->  
        <property name="hibernate.connection.pool.size">test</property>

		<!-- 设置连接提供者 -->
		<!-- <property name="hibernate.connection.provider_class">
					org.hibernate.connection.C3P0ConnectionProvider
			 </property> -->
		<!-- c3p0连接池的配置 -->
		<!-- <property name="hibernate.c3p0.max_size">20</property> --> <!-- 最大连接池 -->
		<!-- <property name="hibernate.c3p0.min_size">5</property> --> <!-- 最小连接数 -->
		<!-- <property name="hibernate.c3p0.timeout">120</property> --> <!-- 超时 -->
		<!-- <property name="hibernate.c3p0.idle_test_period">3000</property> --> <!-- 空闲连接 -->

		<!-- 可以将向数据库发送的sql显示出来，设置成false 可以提高效率 -->
		<property name="hibernate.show_sql">true</property>
		<!-- 格式化sql -->
		<property name="hibernate.format_sql">true</property>

		<!-- hibernate的方言,告诉Hibernate使用的是MySQL数据库 -->
		<property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property>

		<!--jdbc.fetch_size是指Hibernate每次从数据库中取出并放到JDBC的Statement中的记录条数。FetchSize设的越大，读数据库的次数越少，速度越快，Fetch Size越小，读数据库的次数越多，速度越慢-->  
        <property name="jdbc.fetch_size">50</property>  

        <!--jdbc.batch_size是指Hibernate批量插入,删除和更新时每次操作的记录数。
		BatchSize越大，批量操作的向数据库发送Sql的次数越少，速度就越快，同样耗用内存就越大-->  
        <property name="jdbc.batch_size">23</property> 

		<!--jdbc.use_scrollable_resultset是否允许Hibernate用JDBC的可滚动的结果集。对分页的结果集。对分页时的设置非常有帮助-->  
        <property name="jdbc.use_scrollable_resultset">false</property>  

		<!--connection.useUnicode连接数据库时是否使用Unicode编码-->  
        <property name="Connection.useUnicode">true</property>

		<!-- 自动创建表 -->
		<!--是否自动创建数据库表  他主要有一下几个值：  
			validate:当sessionFactory创建时，自动验证或者schema定义导入数据库。  
			create:每次启动都drop掉原来的schema，创建新的。  
			create-drop:当sessionFactory明确关闭时，drop掉schema。  
			update(常用):如果没有schema就创建，有就更新。  
		-->  
		<property name="hibernate.hbm2ddl.auto">update</property>
 
		<!--配置此处 sessionFactory.getCurrentSession()可以完成一系列的工作，当调用时，  
			hibernate将session绑定到当前线程，事务结束后，hibernate  
			将session从当前线程中释放，并且关闭session。当再次调用getCurrentSession()时，
			将得到一个新的session，并重新开始这一系列工作。
		-->  

		<property name="current_session_context_class">thread</property>
		
		<!-- 用于设置事务提交方式 -->
		<property name="hibernate.connection.autocommit">true</property>

		<!-- 配置hibernate的映射文件所在位置 -->
		<mapping resource="com/SSH/pojo/User.hbm.xml" />
	</session-factory>
 
</hibernate-configuration>	